<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Second_Ass</title>
    <link href="/2023/06/17/Ass/"/>
    <url>/2023/06/17/Ass/</url>
    
    <content type="html"><![CDATA[<p>任务要求：<br>给你一个数，根据指令（大&#x2F;小），通过排序找出比这个数大一点或小一点的数。<br>实现思路：（待补充）</p><p>Suppose we have a 10 digit number 2139548760 stored in a list like this<br>[ 2, 1, 3, 9, 5, 4, 8, 7, 6, 0 ]<br>we can rearrange the digits to get the next highest number using those digits. This would give us<br>this<br>[ 2, 1, 3, 9, 5, 6, 0, 4, 7, 8 ]<br>We could also rearrange the digits to get the next lowest number using those digits. This would<br>give us this<br>[ 2, 1, 3, 9, 5, 4, 8, 7, 0, 6 ]<br>Write a program that reads in a 10 digit number and store the digits in a list.<br>Then the program asks the user to choose whether they want the next highest number or the next<br>lowest number.<br>The user chooses which one they want and the program rearranges the list to produce what they<br>want.<br>Finally the program prints out the 10 digit number that the user wanted.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">swap</span>(<span class="hljs-params">lst, index1, index2</span>):<br>                               <span class="hljs-comment"># function to swap elements at given indices in a list</span><br>    temp = lst[index1]<br>    lst[index1] = lst[index2]<br>    lst[index2] = temp<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">given_list, length, start_index</span>):<br>                               <span class="hljs-comment"># function to perform selection sort on a sublist of given_list starting from start_index</span><br>    i = start_index<br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        min_index = i<br>        <span class="hljs-keyword">while</span> j != length :<br>            <span class="hljs-keyword">if</span> given_list[j] &lt; given_list[min_index]:<br>                min_index = j<br>            j = j + <span class="hljs-number">1</span><br>        swap(given_list, i, min_index)<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_list</span>(<span class="hljs-params">n</span>):<br>                                  <span class="hljs-comment"># function to convert an integer into a list of its digits</span><br>    i = <span class="hljs-number">9</span><br>    lst=[<span class="hljs-number">0</span>] * <span class="hljs-number">10</span><br>    <span class="hljs-keyword">while</span> i != -<span class="hljs-number">1</span>:<br>        lst[i] = <span class="hljs-built_in">int</span>(n % <span class="hljs-number">10</span>)<br>        n = n // <span class="hljs-number">10</span><br>        i = i - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">highest_digits</span>(<span class="hljs-params">lst</span>):<br>                                     <span class="hljs-comment"># function to find the next highest number</span><br>    i = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (lst[i-<span class="hljs-number">1</span>]) &gt;= (lst[i]):<br>        i  = i - <span class="hljs-number">1</span><br>                                     <span class="hljs-comment"># i is the index of the digit that begin to sort</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        start = i - <span class="hljs-number">1</span><br>        j = <span class="hljs-number">9</span><br>        <span class="hljs-keyword">while</span> j &gt; i <span class="hljs-keyword">and</span> lst[j] &lt;= lst[i-<span class="hljs-number">1</span>]:<br>            j = j - <span class="hljs-number">1</span><br>                                <span class="hljs-comment"># j is the index of the digit that will replace the digit at index i-1</span><br>        swap(lst, start, j)<br>       <span class="hljs-comment"># performing selection sort on the sublist starting from index i to get the next highest number</span><br>        selection_sort(lst, <span class="hljs-number">10</span>, i)<br>        <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lowest_digits</span>(<span class="hljs-params">lst</span>):<br>                                                 <span class="hljs-comment"># function to find the next lowest number</span><br>    i = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> lst[i-<span class="hljs-number">1</span>] &lt;= lst[i]:<br>        i  = i - <span class="hljs-number">1</span><br>                                                 <span class="hljs-comment"># i is the index of the digit that begin to sort</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    start = i - <span class="hljs-number">1</span><br>    j = <span class="hljs-number">9</span><br>    <span class="hljs-keyword">while</span> j &gt; i <span class="hljs-keyword">and</span> lst[j] &gt;= lst[i - <span class="hljs-number">1</span>]:<br>        j = j - <span class="hljs-number">1</span><br>                                                <span class="hljs-comment"># j is the index of the digit that will replace the digit at index i-1</span><br>    swap(lst, start, j)<br>                        <span class="hljs-comment"># performing selection sort on the sublist starting from index i to get the next lowest number</span><br>    selection_sort(lst, <span class="hljs-number">10</span>, i)<br>    <span class="hljs-keyword">return</span> lst<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_digit</span>():<br>    n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input a 10 digit number (not need space):&quot;</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(n) != <span class="hljs-number">10</span>:<br>        n = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Invalid input, please input a 10 digit number:&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_input_key</span>():<br>    key = <span class="hljs-built_in">input</span>(<br>        <span class="hljs-string">&quot;Choose whether they want the next highest number or the next lowest number. &quot;</span><br>        <span class="hljs-string">&quot;IF highest then input h IF lowest then input l:&quot;</span>)<br>    <span class="hljs-keyword">while</span> key <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>]:<br>        key = <span class="hljs-built_in">input</span>(<br>            <span class="hljs-string">&quot;Invalid input. Choose whether you want the next highest number or the next lowest number. &quot;</span><br>            <span class="hljs-string">&quot;If highest then input h, if lowest then input l:&quot;</span>)<br>    <span class="hljs-keyword">return</span> key<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_result</span>(<span class="hljs-params">next_num</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">10</span>:<br>        <span class="hljs-built_in">print</span>(next_num[i], end=<span class="hljs-string">&quot;&quot;</span>)<br>        i = i + <span class="hljs-number">1</span><br><br><br><span class="hljs-comment"># main program</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_next_number</span>():<br>    n = get_input_digit()<br>    key = get_input_key()<br>    lst = get_list(n)<br>    <span class="hljs-keyword">if</span> key == <span class="hljs-string">&quot;h&quot;</span> <span class="hljs-keyword">or</span> key == <span class="hljs-string">&quot;H&quot;</span>:<br>                                          <span class="hljs-comment"># finding the next highest number</span><br>        next_num = highest_digits(lst)<br>        <span class="hljs-keyword">if</span> next_num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;There is no higher number.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print_result(next_num)<br>    <span class="hljs-keyword">elif</span> key == <span class="hljs-string">&quot;l&quot;</span> <span class="hljs-keyword">or</span> key == <span class="hljs-string">&quot;L&quot;</span>:<br>                                           <span class="hljs-comment"># finding the next lowest number</span><br>        next_num = lowest_digits(lst)<br>        <span class="hljs-keyword">if</span> next_num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;There is no lower numver.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            print_result(next_num)<br>find_next_number()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>First_Ass_Calendar</title>
    <link href="/2023/05/05/calendar/"/>
    <url>/2023/05/05/calendar/</url>
    
    <content type="html"><![CDATA[<p>给定年月，输出该月的竖版日历</p><p>Example 3, 2023</p><p>M 6 13 20 27</p><p>T 7 14 21 28</p><p>W 1 8 15 22 29</p><p>T 2 9 16 23 30</p><p>F 3 10 17 24 31</p><p>S 4 11 18 25 </p><p>S 5 12 19 26</p><h2 id="思路重现"><a href="#思路重现" class="headerlink" title="思路重现"></a>思路重现</h2><p>python的输出逻辑是横板输出，所以在打印竖版日历，就是计算某天是星期几。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">weekly_calendar</span>(<span class="hljs-params">w, m, y</span>):<br>    title = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> w == <span class="hljs-number">1</span>:<br>        title = <span class="hljs-string">&quot;M&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">2</span>:<br>        title = <span class="hljs-string">&quot;T&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">3</span>:<br>        title = <span class="hljs-string">&quot;W&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">4</span>:<br>        title = <span class="hljs-string">&quot;T&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">5</span>:<br>        title = <span class="hljs-string">&quot;F&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">6</span>:<br>        title = <span class="hljs-string">&quot;S&quot;</span><br>    <span class="hljs-keyword">elif</span> w == <span class="hljs-number">7</span>:<br>        title = <span class="hljs-string">&quot;S&quot;</span><br>    j = <span class="hljs-number">1</span><br>    first_day = get_weekday_of_date(<span class="hljs-number">1</span>, m, y)<br>    <span class="hljs-keyword">if</span> first_day &gt; w:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;title&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot;    &quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;title&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br><br>    <span class="hljs-keyword">while</span> j &lt; get_maximum_days_in_month(m, y)+<span class="hljs-number">1</span>:<br><br>        <span class="hljs-keyword">if</span> get_weekday_of_date(j, m, y) == w:<br>            <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">10</span>:<br>                <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&quot;  &quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(j, end=<span class="hljs-string">&quot; &quot;</span>)<br>        j = j+<span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_maximum_days_in_month</span>(<span class="hljs-params">m, y</span>):<br>    <span class="hljs-keyword">if</span> m == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">5</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">7</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">8</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">12</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">31</span><br>    <span class="hljs-keyword">elif</span> m == <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">6</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">9</span> <span class="hljs-keyword">or</span> m == <span class="hljs-number">11</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">30</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> is_leap(y):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">29</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">28</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_weekday_of_date</span>(<span class="hljs-params">d, m, y</span>):     <span class="hljs-comment"># 计算某天是星期几</span><br>    count_day = get_total_days_in_years(y) + get_total_days_in_months(m, y) + get_day_of_month(d)<br>    <span class="hljs-keyword">return</span> (count_day % <span class="hljs-number">7</span>) + <span class="hljs-number">1</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_leap</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">if</span> y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> y % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total_days_in_years</span>(<span class="hljs-params">y</span>):<br>    i = <span class="hljs-number">1900</span><br>    count1 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != y:<br>        <span class="hljs-keyword">if</span> is_leap(i):<br>            count1 += <span class="hljs-number">366</span><br><br>        <span class="hljs-keyword">else</span>:<br>            count1 += <span class="hljs-number">365</span><br><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count1<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_total_days_in_months</span>(<span class="hljs-params">m, y</span>):<br>    i = <span class="hljs-number">1</span><br>    count2 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != m:<br>        count2 += get_maximum_days_in_month(i, y)<br>        i = i +<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_day_of_month</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> d-<span class="hljs-number">1</span><br><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_vertical_calendar</span>():<br>    y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please choose the year:&quot;</span>))<br>    m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please choose the month:&quot;</span>))<br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">8</span>:<br>        weekly_calendar(i, m, y)<br>        i = i + <span class="hljs-number">1</span><br><br><br>generate_vertical_calendar()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sorting  a list</title>
    <link href="/2023/05/05/list/"/>
    <url>/2023/05/05/list/</url>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="动图解析"><a href="#动图解析" class="headerlink" title="动图解析"></a>动图解析</h2><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/selectionSort.gif"></p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>首先在未排序序列中找到最小元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕</p><h2 id="代码实现-By-Lecture"><a href="#代码实现-By-Lecture" class="headerlink" title="代码实现(By Lecture)"></a>代码实现(By Lecture)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">selection_sort</span>(<span class="hljs-params">given_list, length</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        min_index = i<br>        <span class="hljs-keyword">while</span> j != length :<br>            <span class="hljs-keyword">if</span> given_list[j] &lt; given_list[min_index]:<br>                min_index = j<br>            j = j +<span class="hljs-number">1</span><br>        swap(given_list, i, min_index)<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br></code></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="动图解析-1"><a href="#动图解析-1" class="headerlink" title="动图解析"></a>动图解析</h2><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="InsertionSort"></p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>将元素分为 <strong>已排序</strong> 和 <strong>未排序</strong> 两组</p><p>扫描未排序数组，将其插入已排序数组的正确位置</p><h2 id="代码实现（By-lecture"><a href="#代码实现（By-lecture" class="headerlink" title="代码实现（By lecture)"></a>代码实现（By lecture)</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">insertion_sort</span>(<span class="hljs-params">given_list, length</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != length:<br>        j = i<br>        <span class="hljs-keyword">while</span> j != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> given_list[j-<span class="hljs-number">1</span>] &gt; given_list[j]:<br>            swap(given_list, j, j-<span class="hljs-number">1</span>)<br>            j = j - <span class="hljs-number">1</span><br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> given_list<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tutorial_14th_Apr</title>
    <link href="/2023/04/14/tutorial-14th-Apr/"/>
    <url>/2023/04/14/tutorial-14th-Apr/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [ <span class="hljs-number">1</span>,<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">34</span>, <span class="hljs-number">200</span> ]<br>list2 = [ <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">31</span>, <span class="hljs-number">34</span>, <span class="hljs-number">92</span>, <span class="hljs-number">201</span>, <span class="hljs-number">300</span> ]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> array  <span class="hljs-comment">#基线条件</span><br>    <span class="hljs-keyword">else</span>:<br>        standard = array[<span class="hljs-number">0</span>]  <span class="hljs-comment">#默认选择第一个为基准值</span><br>        i = <span class="hljs-number">1</span><br>        less = []<br>        big = []<br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">20</span>:<br>            <span class="hljs-keyword">if</span> array[i] &lt;= standard:<br>                less.append(array[i])<br>            <span class="hljs-keyword">else</span>:<br>                big.append(array[i])<br>            i = i+<span class="hljs-number">1</span><br><br><br>        <span class="hljs-keyword">return</span> sort(less) + [standard] + sort(big)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort_new_array</span>(<span class="hljs-params">a, b</span>):<br>    list_new = list1 + list2<br>    sort(list_new)<br>    <span class="hljs-keyword">return</span> list_new<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_odd</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_odd_even</span>(<span class="hljs-params">array</span>):<br>    odd_list = []<br>    even_list = []<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">20</span>:<br>        <span class="hljs-keyword">if</span> is_odd(array[i]):<br>            odd_list.append(array[i])<br>        <span class="hljs-keyword">else</span>:<br>            even_list.append(array[i])<br>        i = i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> odd_list, even_list<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_same_number</span>(<span class="hljs-params">list1, list2</span>):<br>    i = <span class="hljs-number">0</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i != <span class="hljs-number">10</span>:<br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> j != <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">if</span> list1[i] == list2[j]:<br>                count = count + <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>            j = j + <span class="hljs-number">1</span><br>        i = i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br><span class="hljs-built_in">print</span>(count_same_number(list1, list2))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shift_list1</span>(<span class="hljs-params">f, n</span>):<br>    i = <span class="hljs-number">0</span><br>    new_list = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(f)<br>    <span class="hljs-keyword">while</span> i != <span class="hljs-built_in">len</span>(f)-<span class="hljs-number">1</span>:<br>        new_list[(i+n) % <span class="hljs-built_in">len</span>(f)] = f[i]<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> new_list<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_ascending</span>(<span class="hljs-params">array</span>):<br>    i = <span class="hljs-number">0</span><br>    flag = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> array[i] &lt;= array[i+<span class="hljs-number">1</span>]:<br>            i = i+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            flag = <span class="hljs-literal">False</span><br>            i = <span class="hljs-built_in">len</span>(array)-<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_ascending_after_roted</span>(<span class="hljs-params">array</span>):<br>    n = <span class="hljs-number">0</span><br>    flag = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">while</span> n != <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> flag :<br>        <span class="hljs-keyword">if</span> is_ascending(shift_list1(array,n)):<br>            flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            n = n+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> flag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linear Search in PYTHON</title>
    <link href="/2023/04/03/3-29/"/>
    <url>/2023/04/03/3-29/</url>
    
    <content type="html"><![CDATA[<p>A traversal idea that exits when you need to stop.</p><p>Suppose there is a List including 20 int. Let us show some example question.</p><p>a. Find the smallest index i where ‘f[i] &#x3D;&#x3D; 12’</p>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Count and Sum Digits</title>
    <link href="/2023/03/01/3-1/"/>
    <url>/2023/03/01/3-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Count-Digits"><a href="#Count-Digits" class="headerlink" title="Count Digits"></a>Count Digits</h1><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>This is a transfer int to str. This is not a math solution</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits1</span>(<span class="hljs-params">x</span>):<br>    x=<span class="hljs-built_in">str</span>(x)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(x)<br></code></pre></td></tr></table></figure><h2 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits2</span>(<span class="hljs-params">x</span>):<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> x != <span class="hljs-number">0</span>:<br>        x = x // <span class="hljs-number">10</span><br>        count = count +<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure><h2 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits3</span>(<span class="hljs-params">n</span>):   <span class="hljs-comment">#Recursion</span><br><span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> + count_digits3(n //<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><p>This is about Recursion. </p><h1 id="Sum-Digits"><a href="#Sum-Digits" class="headerlink" title="Sum Digits"></a>Sum Digits</h1><h2 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_digit1</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">10</span>:<br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> (n%<span class="hljs-number">10</span> + sum_digit1(n//<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><h2 id="NO-2-1"><a href="#NO-2-1" class="headerlink" title="NO.2"></a>NO.2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pyt">def sum_digit2(n):<br>    sum=1<br>    while n != 0:<br>        sum = sum * (n%10)<br>        n = n // 10<br>    return sum<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Perfect Number &amp; Prime Number</title>
    <link href="/2023/02/28/2_28/"/>
    <url>/2023/02/28/2_28/</url>
    
    <content type="html"><![CDATA[<h1 id="Prime-number"><a href="#Prime-number" class="headerlink" title="Prime number"></a>Prime number</h1><p>It is a basic problem for CS students. The part aim  to give more intersiting solution.</p><h2 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>According to Henry, he asks us to not print such as ‘for’,  ‘break’,’continue’. Something only python could be used. </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">x</span>):<br>  <span class="hljs-keyword">if</span> x &lt;= <span class="hljs-number">1</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>  <span class="hljs-keyword">elif</span> x == <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>  <span class="hljs-keyword">elif</span> x % <span class="hljs-number">2</span> ==<span class="hljs-number">0</span>:<br>      <span class="hljs-keyword">return</span>  <span class="hljs-literal">False</span><br>  <span class="hljs-keyword">else</span>:<br>      i =<span class="hljs-number">3</span><br>      <span class="hljs-keyword">while</span> i * i &lt;= x:<br>          <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>          i = i + <span class="hljs-number">2</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>This is a code only use ‘if’ and ‘while’. Maybe i need to change ‘Ture’ or ‘False’ to ‘1’ and ‘0’.</p><p>About the prime, as we as all kown, 1 is not a prime as the prime defination. All even number except 2 is not prime, because they could be int division by 2. So i only to search odd number. </p><p>Let x divise i ,i always be an even, if there no x % i&#x3D;0</p><p>so, x must be a prime.</p><p>For the condition of while. i only need to while to sqrt{x}. Those factors always show in double. Such as 28&#x3D;4*7 it has a factor smaller than sqrt{x}, at the same the another is greater than sqrt{x}. So i only to identify a aspect between smaller and greater.</p><h1 id="Perfect-number"><a href="#Perfect-number" class="headerlink" title="Perfect number"></a>Perfect number</h1><h2 id="NO-1-1"><a href="#NO-1-1" class="headerlink" title="NO.1"></a>NO.1</h2><p>Perfect number is a positive integer whose sum of its proper divisiors is equal to one.</p><p>Example 1+2+3&#x3D;6. The 6 is a perfect number.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_perfect</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">1</span><br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt; x:<br>        <span class="hljs-keyword">if</span> x % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + i<br>        i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span> == x:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    
    <categories>
      
      <category>1005J</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BFS</title>
    <link href="/2023/02/07/BFS/"/>
    <url>/2023/02/07/BFS/</url>
    
    <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/%E5%9B%BE" alt="图源网络"></p><p>图由节点和边构成。在计科中，一个图就是一些顶点的集合。</p><blockquote><p>图G是一个有序二元组(V,E)，其中V称为顶集(Vertices Set)，E称为边集(Edges set)，E与V不相交。它们亦可写成V(G)和E(G)。其中，顶集的元素被称为顶点(Vertex)，边集的元素被称为边(edge)。</p></blockquote><h1 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h1><p>一种用于图的查找算法</p><p>通常用于解决：</p><ol><li>从A出发，有前往B的路径吗</li><li>从A出发，前往B的哪条路径最短</li></ol><h2 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h2><p>O(V+E)    </p><p>V为顶点数   E为边数</p><h2 id="是否存在路径的问题"><a href="#是否存在路径的问题" class="headerlink" title="是否存在路径的问题"></a>是否存在路径的问题</h2><p>假设需要寻找能解决编程问腿的大佬一名，首先在自己的朋友圈中查找。<img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/0e07f6a37e6405e5b887ebc90692d33.jpg" alt="我的朋友圈"></p><p>依次检查，他们三个是否会编程：</p><ul><li><input disabled type="checkbox"> Chuck</li><li><input disabled type="checkbox"> Andy</li><li><input disabled type="checkbox"> Bobbie</li></ul><p>假设他们都不会编程，那就要检查他们的朋友，是否有精通编程的。<img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/63f9ec0fd3f22351fb5d681c3b90ae9.jpg" alt="朋友的朋友圈"></p><p>检查名单中的人时，如果他不会编程，就将他的朋友加入名单，等待检查。</p><ul><li><input checked disabled type="checkbox"> Chuck                                                                             若Chuck 会编程，任务完成                                                 </li><li><input disabled type="checkbox"> Andy                                                                                若Chuck不会，将Chuck的所有朋友加入清单</li><li><input disabled type="checkbox"> Bobbie</li></ul><p>————————————————————</p><ul><li><input disabled type="checkbox"> Andy</li><li><input disabled type="checkbox"> Bobbie</li><li><input disabled type="checkbox"> sean</li><li><input disabled type="checkbox"> Zhang</li></ul><p>重复过程，直到找出会编程的人。类似于上述算法搜遍我的人际网，直到找出会编程的人。即广度优先搜索算法。</p><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><p>寻找离我关系最近的朋友。先寻找我的朋友，在寻找我朋友的朋友。广度优先搜索正是这样的过程。</p><p>正因如此，广度优先搜索不仅查找从A到B的路径，也是在寻找最短路径。</p><p>我们始终按添加顺序的检查清单上的人，这样才能实现广度优先搜索。实现这样目的的数据结构——队列</p><h2 id="实现图"><a href="#实现图" class="headerlink" title="实现图"></a>实现图</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#先用散列表来实现图-字典</span><br>graph = &#123;&#125;<br>graph[<span class="hljs-string">&quot;me&quot;</span>] = [<span class="hljs-string">&quot;Ahuck&quot;</span>, <span class="hljs-string">&quot;Andy&quot;</span>, <span class="hljs-string">&quot;Bobbie&quot;</span>]<br>graph[<span class="hljs-string">&quot;Chuck&quot;</span>] = [<span class="hljs-string">&quot;sean&quot;</span>, <span class="hljs-string">&quot;Zhang&quot;</span>]<br>graph[<span class="hljs-string">&quot;Andy&quot;</span>] = [<span class="hljs-string">&quot;sean&quot;</span>, <span class="hljs-string">&quot;David&quot;</span>]<br>graph[<span class="hljs-string">&quot;Bobbie&quot;</span>] = [<span class="hljs-string">&quot;Alex&quot;</span>]<br><span class="hljs-comment">#以上就可以表示上面画的关系网了</span><br></code></pre></td></tr></table></figure><h2 id="实现算法"><a href="#实现算法" class="headerlink" title="实现算法"></a>实现算法</h2><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/7b760fd6267b24e4f66daed12fe608d.jpg" alt="算法实现"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque <span class="hljs-comment">#python中使用deque创建队列</span><br>search_list = deque()<br>search_list += graph[<span class="hljs-string">&quot;me&quot;</span>]   <span class="hljs-comment">#将我的朋友加入队列</span><br>searched = []<span class="hljs-comment">#已经被查过的人</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">he_is_programmer</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;检查他会不会编程&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> search_list:<span class="hljs-comment">#只要队列不空</span><br>    examined = search_list.popleft()<span class="hljs-comment">#取出队列的第一个人</span><br>    <span class="hljs-keyword">if</span> examined <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> searched:<br>        <span class="hljs-keyword">if</span> he_is_programmer(examined):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;he is programmer&quot;</span>)   <span class="hljs-comment">#会编程</span><br>        <span class="hljs-keyword">return</span> true<br>    <span class="hljs-keyword">else</span>:<br>        search_list += graph[examined]<span class="hljs-comment">#不会编程</span><br>            seaeched.append(examined)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>   <span class="hljs-comment">#执行至此，没有人会编程</span><br></code></pre></td></tr></table></figure><p>算法将一直运行，直到：</p><ul><li><input disabled type="checkbox"> 找到一位会编程的</li><li><input disabled type="checkbox"> 队列为空</li></ul><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><blockquote><p>队列是一种特殊的<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8?fromModule=lemma_inlink">线性表</a>，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E8%A1%A8?fromModule=lemma_inlink">线性表</a>。 [1] </p></blockquote><p>公交车排队一样，排在前面的先上车。</p><p>在查找过程中，先加入的人先出队接受检查。</p><p>队列是先进先出（FIFO）</p><p>栈是后进后先出(LIFO)</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>散列表</title>
    <link href="/2023/02/01/a/"/>
    <url>/2023/02/01/a/</url>
    
    <content type="html"><![CDATA[<h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><p>散列表是一种数据结构，也叫Hash table. 在python中以字典实现。</p><p>散列表通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。散列表是数组的一种扩展。</p><h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>商店中有许多商品，客户来买东西时，需要在一个本子中查找价格。商品很多，我们查找价格的时间就会增加，无论使用之前的简单查找 or 二分查找。</p><p>如果我想要快速的获取商品的价格，我就需要一个数组来存放商品的价格，apple放在[0], milk放在[1]…以此类推。</p><p>现在我想要知道apple的价格，我仅需要取出数组[0]的存储信息。</p><p>这就是散列思想，商品的名称称为key，然后通过<strong>散列函数</strong>将商品名称与数组位置匹配。</p><h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>给出自变量，散列函数返还一个数字(即数组索引位置)。这里的一些做法和高中数学定义的函数是相似的。</p><ol><li>对于给定自变量，有且仅有一个函数值与之对应。例如，我每次输入apple得到的都应是0。</li><li>对于同一函数值，可以有多个自变量与之对应。但是在列表函数中，将不同的输入映射到不同的数字是最好的结果。</li></ol><p>对于第二条的最佳情况，我们无法避免这也被称为哈希冲突。</p><h2 id="一些有意思的应用"><a href="#一些有意思的应用" class="headerlink" title="一些有意思的应用"></a>一些有意思的应用</h2><p>最近做网站用到的DNS解析，正式将网站地址映射到IP地址。上软广</p><p>mrlepro.com      –&gt;  185.199.109.153</p><h1 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h1><p>当不同输入映射到同一位置时候就出现了冲突。</p><h2 id="链表法解决冲突"><a href="#链表法解决冲突" class="headerlink" title="链表法解决冲突"></a>链表法解决冲突</h2><p>如果两个键映射到了同一个位置，就在这个位置储存一个链表。<img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/fa0ffdca9bf61bb75780bc3ec124959.jpg" alt="fa0ffdca9bf61bb75780bc3ec124959"></p><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><p><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/1d0a3eddf6ab1b9cefa9699d569bc7e.jpg" alt="1d0a3eddf6ab1b9cefa9699d569bc7e"></p><p>避免冲突的因素：</p><ol><li>较低的装填因子</li><li>良好的散列函数</li></ol><h2 id="装填因子"><a href="#装填因子" class="headerlink" title="装填因子"></a>装填因子</h2><p>散列表中元素数 &#x2F; 位置总数</p><p>经验而谈，当装填因子大于0.7时，扩大散列表长度降低装填因子。</p><h2 id="良好的散列函数"><a href="#良好的散列函数" class="headerlink" title="良好的散列函数"></a>良好的散列函数</h2><p>MD5， SHA，CRC</p><p>待补充</p>]]></content>
    
    
    <categories>
      
      <category>学习资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>题解——pythonTip44超级楼梯</title>
    <link href="/2023/01/21/%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94pythonTip44%E8%B6%85%E7%BA%A7%E6%A5%BC%E6%A2%AF/"/>
    <url>/2023/01/21/%E9%A2%98%E8%A7%A3%E2%80%94%E2%80%94pythonTip44%E8%B6%85%E7%BA%A7%E6%A5%BC%E6%A2%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h1><blockquote><p>‘’有一楼梯共n级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第n级，共有多少种走法？<br>现在给你一个正整数n（0&lt;n&lt;40),请你输出不同的走法数。”</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>输入：n &#x3D; 2</p><p>输出：1</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>这题好熟悉，高中数学，就是排列组合了。用m个1步和k个2步走上台阶，可能的走法。</p><h5 id="以需要走7步数为例吧："><a href="#以需要走7步数为例吧：" class="headerlink" title="以需要走7步数为例吧："></a>以需要走7步数为例吧：</h5><h5 id="step-1-零个1：A-7-7"><a href="#step-1-零个1：A-7-7" class="headerlink" title="step 1  零个1：A^7^7"></a>step 1  零个1：A^7^<del>7</del></h5><p>7&#x3D;1+1+1+1+1+1+1</p><h5 id="step-2-一个2：A-1-6"><a href="#step-2-一个2：A-1-6" class="headerlink" title="step 2 一个2：A^1^6"></a>step 2 一个2：A^1^<del>6</del></h5><p>7&#x3D;2+1+1+1+1+1</p><p>…</p><h5 id="step-3-两个2：A-2-5-x2F-A-2-2-重复元素排序问题"><a href="#step-3-两个2：A-2-5-x2F-A-2-2-重复元素排序问题" class="headerlink" title="step 3 两个2：A^2^5&#x2F; A^2^2    (重复元素排序问题)"></a>step 3 两个2：A^2^<del>5</del>&#x2F; A^2^<del>2</del>    (重复元素排序问题)</h5><p>7&#x3D;2+2+1+1+1</p><p>…</p><h5 id="step4-三个2：A-3-4-x2F-A-3-3"><a href="#step4-三个2：A-3-4-x2F-A-3-3" class="headerlink" title="step4 三个2：A^3^4&#x2F;A^3^3"></a>step4 三个2：A^3^<del>4</del>&#x2F;A^3^<del>3</del></h5><p>7&#x3D;2+2+2+1</p><p>…</p><p><strong>注意事项</strong></p><ol><li>题中的n是台阶的阶数，应与要走的阶梯数区分。如n&#x3D;1时，应输出0，因为不需要走。</li><li>重复元素排序需考虑重复情况</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">perm</span>(<span class="hljs-params">m,k</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;排列数函数&#x27;&#x27;&#x27;</span><br>    fact = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-k+<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>        fact *=j<br>    <span class="hljs-keyword">return</span>  fact<br><br>steep = n-<span class="hljs-number">1</span> <span class="hljs-comment">#步数</span><br>total=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> n==<span class="hljs-number">1</span>:     <span class="hljs-comment">#不用走的情况</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((steep//<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>            total = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            total = total +(perm(steep-i,i) / perm(i,i)) <span class="hljs-comment">#解决重复元素排序重复</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(total))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题目笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pic_text</title>
    <link href="/2023/01/19/pic-text/"/>
    <url>/2023/01/19/pic-text/</url>
    
    <content type="html"><![CDATA[<p>更新了头像<br><img src="https://mrle-1316607909.cos.ap-hongkong.myqcloud.com/%E5%A4%B4%E5%83%8F.png" alt="tup"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2023/01/18/%E9%80%92%E5%BD%92/"/>
    <url>/2023/01/18/%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>两个重要的条件：基线条件（停止条件）   递归条件（执行条件）</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>与数组和了链表一样，是一种数据类型。类似于贴便签，顺序为后入先出。</p><h2 id="递归中的调用栈"><a href="#递归中的调用栈" class="headerlink" title="递归中的调用栈"></a>递归中的调用栈</h2><p>定义阶乘函数fac来理解其</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span>:   <span class="hljs-comment">#基线条件</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:   <span class="hljs-comment">#递归条件</span><br>        <span class="hljs-keyword">return</span> x * fact(x-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/18/%E9%80%92%E5%BD%92/1.jpg" alt="1"><img src="/2023/01/18/%E9%80%92%E5%BD%92/2.jpg" alt="2"></p><p>调用栈相当于帮助程序在调用子函数时记住母函数执行位置，以便返回后继续执行。</p><h1 id="D-amp-C-分而治之"><a href="#D-amp-C-分而治之" class="headerlink" title="D&amp;C(分而治之)"></a>D&amp;C(分而治之)</h1><h2 id="一种解决问题的思路"><a href="#一种解决问题的思路" class="headerlink" title="一种解决问题的思路"></a>一种解决问题的思路</h2><p><img src="/2023/01/18/%E9%80%92%E5%BD%92/3.jpg" alt="3"></p><p>解决步骤：</p><ol><li>找出极限条件</li><li>分解问题，直到符合基线条件</li></ol><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="一种算法"><a href="#一种算法" class="headerlink" title="一种算法"></a>一种算法</h2><p>步骤：</p><ol><li>选择基准值</li><li>将数组分为大于基准值的子数组和大于基准值的子数组</li><li>再对子数组进行快速排序</li></ol><p>当数组为空或仅有一个数组时就无需排序，所以这是基准条件</p><p><em>图示</em></p><p><code>[33,10,15,7]</code> 排序这个数组</p><p>取&#x3D;&#x3D;33&#x3D;&#x3D;为基准数</p><p><code>[10,15,7][33][ ]</code>得到两个子数组，一个为空达到基准条件</p><p>取&#x3D;&#x3D;10&#x3D;&#x3D;为基准数</p><p><code>[7][10][15]+[33]+[ ]</code>达到基准条件，快速排序完成</p><p><em>代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sort</span>(<span class="hljs-params">array</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        renturn array  <span class="hljs-comment">#基线条件</span><br>    <span class="hljs-keyword">else</span>:<br>        standard = array[<span class="hljs-number">0</span>]  <span class="hljs-comment">#默认选择第一个为基准值</span><br>        less = [<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &lt;= standard]<br>        big = [<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> i &gt; standard]<br>        <span class="hljs-keyword">return</span> sort(less) + [standard] + sort(big)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习资料</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>Mrle</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p>很高兴认识你！ 我是刘乐</p><p>欢迎来到我的<em>mrlepro</em>,这是我记笔记的地方。想用博客记录学过的知识。我会每周更新（希望不会放弃）</p><p>一名 学生，<strong>runner &amp; cyclist</strong>,就读于北京工业大学。<strong>ESFJ人格</strong></p><p>音乐：Taylor &amp; 李</p><h1 id="关于Blog"><a href="#关于Blog" class="headerlink" title="关于Blog"></a>关于Blog</h1><p>按照知乎的说法，“<strong>技术型人才</strong>”（是谁？）都应该都一个技术博客。宅家的日子，我就打算开始做这个Blog。</p><p><em>《零基础小白也能搭建个人博客了》</em>（真的吗？？？）终于经过多天的努力，在<a href="https://blog.krahsu.top//">CharlesHsu</a>和<a href="https://blog.wiung.com/">WJUP </a>的帮助下，mrlepro在2023&#x2F;1&#x2F;18诞生了。mrlepro的访问速度可能会很慢，我会继续投入时间和金钱完善它。您也可以打赏以支持。</p><p>希望在这里，我们都能学到知识。</p>]]></content>
    
  </entry>
  
  
  
</search>
